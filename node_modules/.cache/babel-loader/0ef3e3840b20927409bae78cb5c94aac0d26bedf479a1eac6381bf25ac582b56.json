{"ast":null,"code":"let isLoggedIn = false;\nexport const checkLoginStatus = () => {\n  // Check if the user is logged in (e.g., by checking a token in localStorage)\n  const token = localStorage.getItem('token');\n  isLoggedIn = !!token; // Set isLoggedIn based on token presence\n};\n\nexport const login = (username, password) => {\n  // Perform login logic here (e.g., send login request to the server)\n  // If login is successful, generate a token and set the user as logged in\n  if (username === 'admin' && password === 'password') {\n    const token = generateToken();\n    localStorage.setItem('token', token);\n    isLoggedIn = true;\n    return true; // Return true to indicate successful login\n  }\n\n  return false; // Return false to indicate failed login\n};\n\nexport const logout = () => {\n  // Perform logout logic here (e.g., clear token from localStorage)\n  localStorage.removeItem('token');\n  checkLoginStatus(); // Update the login status after removing the token\n};\n\nexport const generateToken = () => {\n  // Generate a random token for the logged-in user\n  const token = Math.random().toString(36).substr(2);\n  return token;\n};\nexport const isUserLoggedIn = () => {\n  return isLoggedIn;\n};","map":{"version":3,"names":["isLoggedIn","checkLoginStatus","token","localStorage","getItem","login","username","password","generateToken","setItem","logout","removeItem","Math","random","toString","substr","isUserLoggedIn"],"sources":["/Users/mantas/Desktop/Boolean/React/project/src/components/Login/auth.js"],"sourcesContent":["let isLoggedIn = false;\n\nexport const checkLoginStatus = () => {\n  // Check if the user is logged in (e.g., by checking a token in localStorage)\n  const token = localStorage.getItem('token');\n  isLoggedIn = !!token; // Set isLoggedIn based on token presence\n};\n\nexport const login = (username, password) => {\n  // Perform login logic here (e.g., send login request to the server)\n  // If login is successful, generate a token and set the user as logged in\n  if (username === 'admin' && password === 'password') {\n    const token = generateToken();\n    localStorage.setItem('token', token);\n    isLoggedIn = true;\n    return true; // Return true to indicate successful login\n  }\n  return false; // Return false to indicate failed login\n};\n\nexport const logout = () => {\n    // Perform logout logic here (e.g., clear token from localStorage)\n    localStorage.removeItem('token');\n    checkLoginStatus(); // Update the login status after removing the token\n  };\n\nexport const generateToken = () => {\n  // Generate a random token for the logged-in user\n  const token = Math.random().toString(36).substr(2);\n  return token;\n};\n\nexport const isUserLoggedIn = () => {\n  return isLoggedIn;\n};\n"],"mappings":"AAAA,IAAIA,UAAU,GAAG,KAAK;AAEtB,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACpC;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3CJ,UAAU,GAAG,CAAC,CAACE,KAAK,CAAC,CAAC;AACxB,CAAC;;AAED,OAAO,MAAMG,KAAK,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAC3C;EACA;EACA,IAAID,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;IACnD,MAAML,KAAK,GAAGM,aAAa,CAAC,CAAC;IAC7BL,YAAY,CAACM,OAAO,CAAC,OAAO,EAAEP,KAAK,CAAC;IACpCF,UAAU,GAAG,IAAI;IACjB,OAAO,IAAI,CAAC,CAAC;EACf;;EACA,OAAO,KAAK,CAAC,CAAC;AAChB,CAAC;;AAED,OAAO,MAAMU,MAAM,GAAGA,CAAA,KAAM;EACxB;EACAP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;EAChCV,gBAAgB,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;;AAEH,OAAO,MAAMO,aAAa,GAAGA,CAAA,KAAM;EACjC;EACA,MAAMN,KAAK,GAAGU,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC;EAClD,OAAOb,KAAK;AACd,CAAC;AAED,OAAO,MAAMc,cAAc,GAAGA,CAAA,KAAM;EAClC,OAAOhB,UAAU;AACnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}